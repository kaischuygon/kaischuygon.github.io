---
import Icon from 'astro-icon';
---

<theme-toggle class="bg-slate-200 dark:bg-slate-800">
	<button class="flex cursor-pointer shadow-outline dark:shadow-outline-dark">
		<span class="sr-only">Dark theme</span>
		<span class="icon light"><Icon name="bx:bx-sun" /></span>
		<span class="icon dark"><Icon name="bx:bx-moon" /></span>
	</button>
</theme-toggle>

<style>
	.icon {
		@apply z-10 relative flex p-2 w-8 aspect-square text-fuchsia-300;
	}

	.icon.light::before {
		@apply -z-10 block absolute inset-0 bg-fuchsia-400 dark:bg-fuchsia-600 content-[''];
	}

	:global(.dark) .icon.light::before {
		transform: translateX(100%);
		@apply duration-300;
	}

	.icon.dark::before {
		transform: translateX(-100%);
		@apply duration-300;
	}

	:global(.dark) .icon.dark,
	:global(html:not(.dark)) .icon.light,
	button[aria-pressed='false'] .icon.light {
		@apply text-fuchsia-950
	}
</style>

<script>
	class ThemeToggle extends HTMLElement {
		constructor() {
			super();

			const button = this.querySelector('button')!;

			/** Set the theme to dark/light mode. */
			const setTheme = (dark: boolean) => {
				document.documentElement.classList[dark ? 'add' : 'remove']('dark');
				button.setAttribute('aria-pressed', String(dark));
			};

			// Toggle the theme when a user clicks the button.
			button.addEventListener('click', () => setTheme(!this.isDark()));

			// Initialize button state to reflect current theme.
			setTheme(this.isDark());
			
		}
		isDark() {
			return document.documentElement.classList.contains('dark');
		}

	}
	customElements.define('theme-toggle', ThemeToggle);
</script>
